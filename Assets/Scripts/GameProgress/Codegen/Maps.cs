// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameProgress.Codegen
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Maps : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static Maps GetRootAsMaps(ByteBuffer _bb) { return GetRootAsMaps(_bb, new Maps()); }
  public static Maps GetRootAsMaps(ByteBuffer _bb, Maps obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool MapsBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "AOT2"); }
  public static bool VerifyMaps(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("AOT2", false, MapsVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Maps __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameProgress.Codegen.Modes? Forest1 { get { int o = __p.__offset(4); return o != 0 ? (GameProgress.Codegen.Modes?)(new GameProgress.Codegen.Modes()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public GameProgress.Codegen.Modes? Forest2 { get { int o = __p.__offset(6); return o != 0 ? (GameProgress.Codegen.Modes?)(new GameProgress.Codegen.Modes()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public GameProgress.Codegen.Modes? Forest3 { get { int o = __p.__offset(8); return o != 0 ? (GameProgress.Codegen.Modes?)(new GameProgress.Codegen.Modes()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public GameProgress.Codegen.Modes? City1 { get { int o = __p.__offset(10); return o != 0 ? (GameProgress.Codegen.Modes?)(new GameProgress.Codegen.Modes()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public GameProgress.Codegen.Modes? City2 { get { int o = __p.__offset(12); return o != 0 ? (GameProgress.Codegen.Modes?)(new GameProgress.Codegen.Modes()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public GameProgress.Codegen.Modes? Utgard1 { get { int o = __p.__offset(14); return o != 0 ? (GameProgress.Codegen.Modes?)(new GameProgress.Codegen.Modes()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public GameProgress.Codegen.Modes? Utgard2 { get { int o = __p.__offset(16); return o != 0 ? (GameProgress.Codegen.Modes?)(new GameProgress.Codegen.Modes()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public GameProgress.Codegen.Modes? Cave1 { get { int o = __p.__offset(18); return o != 0 ? (GameProgress.Codegen.Modes?)(new GameProgress.Codegen.Modes()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public GameProgress.Codegen.Modes? Lake { get { int o = __p.__offset(20); return o != 0 ? (GameProgress.Codegen.Modes?)(new GameProgress.Codegen.Modes()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public GameProgress.Codegen.Modes? Plaza { get { int o = __p.__offset(22); return o != 0 ? (GameProgress.Codegen.Modes?)(new GameProgress.Codegen.Modes()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public GameProgress.Codegen.Modes? Grandmaster { get { int o = __p.__offset(24); return o != 0 ? (GameProgress.Codegen.Modes?)(new GameProgress.Codegen.Modes()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public GameProgress.Codegen.Modes? Casino { get { int o = __p.__offset(26); return o != 0 ? (GameProgress.Codegen.Modes?)(new GameProgress.Codegen.Modes()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public GameProgress.Codegen.Modes? ForestFlooded { get { int o = __p.__offset(28); return o != 0 ? (GameProgress.Codegen.Modes?)(new GameProgress.Codegen.Modes()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public GameProgress.Codegen.Modes? ForestLava { get { int o = __p.__offset(30); return o != 0 ? (GameProgress.Codegen.Modes?)(new GameProgress.Codegen.Modes()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public GameProgress.Codegen.Modes? Deforest1 { get { int o = __p.__offset(32); return o != 0 ? (GameProgress.Codegen.Modes?)(new GameProgress.Codegen.Modes()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public GameProgress.Codegen.Modes? BirthOfLevi { get { int o = __p.__offset(34); return o != 0 ? (GameProgress.Codegen.Modes?)(new GameProgress.Codegen.Modes()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public GameProgress.Codegen.Modes? Mews1k { get { int o = __p.__offset(36); return o != 0 ? (GameProgress.Codegen.Modes?)(new GameProgress.Codegen.Modes()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public GameProgress.Codegen.Modes? RockyMountain { get { int o = __p.__offset(38); return o != 0 ? (GameProgress.Codegen.Modes?)(new GameProgress.Codegen.Modes()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public GameProgress.Codegen.Modes? Shiganshina { get { int o = __p.__offset(40); return o != 0 ? (GameProgress.Codegen.Modes?)(new GameProgress.Codegen.Modes()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public GameProgress.Codegen.Modes? Trost { get { int o = __p.__offset(42); return o != 0 ? (GameProgress.Codegen.Modes?)(new GameProgress.Codegen.Modes()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public GameProgress.Codegen.Modes? FuturisticForest { get { int o = __p.__offset(44); return o != 0 ? (GameProgress.Codegen.Modes?)(new GameProgress.Codegen.Modes()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public GameProgress.Codegen.NamedMap? Other(int j) { int o = __p.__offset(46); return o != 0 ? (GameProgress.Codegen.NamedMap?)(new GameProgress.Codegen.NamedMap()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int OtherLength { get { int o = __p.__offset(46); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameProgress.Codegen.Maps> CreateMaps(FlatBufferBuilder builder,
      Offset<GameProgress.Codegen.Modes> forest1Offset = default(Offset<GameProgress.Codegen.Modes>),
      Offset<GameProgress.Codegen.Modes> forest2Offset = default(Offset<GameProgress.Codegen.Modes>),
      Offset<GameProgress.Codegen.Modes> forest3Offset = default(Offset<GameProgress.Codegen.Modes>),
      Offset<GameProgress.Codegen.Modes> city1Offset = default(Offset<GameProgress.Codegen.Modes>),
      Offset<GameProgress.Codegen.Modes> city2Offset = default(Offset<GameProgress.Codegen.Modes>),
      Offset<GameProgress.Codegen.Modes> utgard1Offset = default(Offset<GameProgress.Codegen.Modes>),
      Offset<GameProgress.Codegen.Modes> utgard2Offset = default(Offset<GameProgress.Codegen.Modes>),
      Offset<GameProgress.Codegen.Modes> cave1Offset = default(Offset<GameProgress.Codegen.Modes>),
      Offset<GameProgress.Codegen.Modes> lakeOffset = default(Offset<GameProgress.Codegen.Modes>),
      Offset<GameProgress.Codegen.Modes> plazaOffset = default(Offset<GameProgress.Codegen.Modes>),
      Offset<GameProgress.Codegen.Modes> grandmasterOffset = default(Offset<GameProgress.Codegen.Modes>),
      Offset<GameProgress.Codegen.Modes> casinoOffset = default(Offset<GameProgress.Codegen.Modes>),
      Offset<GameProgress.Codegen.Modes> forest_floodedOffset = default(Offset<GameProgress.Codegen.Modes>),
      Offset<GameProgress.Codegen.Modes> forest_lavaOffset = default(Offset<GameProgress.Codegen.Modes>),
      Offset<GameProgress.Codegen.Modes> deforest1Offset = default(Offset<GameProgress.Codegen.Modes>),
      Offset<GameProgress.Codegen.Modes> birth_of_leviOffset = default(Offset<GameProgress.Codegen.Modes>),
      Offset<GameProgress.Codegen.Modes> mews_1kOffset = default(Offset<GameProgress.Codegen.Modes>),
      Offset<GameProgress.Codegen.Modes> rocky_mountainOffset = default(Offset<GameProgress.Codegen.Modes>),
      Offset<GameProgress.Codegen.Modes> shiganshinaOffset = default(Offset<GameProgress.Codegen.Modes>),
      Offset<GameProgress.Codegen.Modes> trostOffset = default(Offset<GameProgress.Codegen.Modes>),
      Offset<GameProgress.Codegen.Modes> futuristic_forestOffset = default(Offset<GameProgress.Codegen.Modes>),
      VectorOffset otherOffset = default(VectorOffset)) {
    builder.StartTable(22);
    Maps.AddOther(builder, otherOffset);
    Maps.AddFuturisticForest(builder, futuristic_forestOffset);
    Maps.AddTrost(builder, trostOffset);
    Maps.AddShiganshina(builder, shiganshinaOffset);
    Maps.AddRockyMountain(builder, rocky_mountainOffset);
    Maps.AddMews1k(builder, mews_1kOffset);
    Maps.AddBirthOfLevi(builder, birth_of_leviOffset);
    Maps.AddDeforest1(builder, deforest1Offset);
    Maps.AddForestLava(builder, forest_lavaOffset);
    Maps.AddForestFlooded(builder, forest_floodedOffset);
    Maps.AddCasino(builder, casinoOffset);
    Maps.AddGrandmaster(builder, grandmasterOffset);
    Maps.AddPlaza(builder, plazaOffset);
    Maps.AddLake(builder, lakeOffset);
    Maps.AddCave1(builder, cave1Offset);
    Maps.AddUtgard2(builder, utgard2Offset);
    Maps.AddUtgard1(builder, utgard1Offset);
    Maps.AddCity2(builder, city2Offset);
    Maps.AddCity1(builder, city1Offset);
    Maps.AddForest3(builder, forest3Offset);
    Maps.AddForest2(builder, forest2Offset);
    Maps.AddForest1(builder, forest1Offset);
    return Maps.EndMaps(builder);
  }

  public static void StartMaps(FlatBufferBuilder builder) { builder.StartTable(22); }
  public static void AddForest1(FlatBufferBuilder builder, Offset<GameProgress.Codegen.Modes> forest1Offset) { builder.AddOffset(0, forest1Offset.Value, 0); }
  public static void AddForest2(FlatBufferBuilder builder, Offset<GameProgress.Codegen.Modes> forest2Offset) { builder.AddOffset(1, forest2Offset.Value, 0); }
  public static void AddForest3(FlatBufferBuilder builder, Offset<GameProgress.Codegen.Modes> forest3Offset) { builder.AddOffset(2, forest3Offset.Value, 0); }
  public static void AddCity1(FlatBufferBuilder builder, Offset<GameProgress.Codegen.Modes> city1Offset) { builder.AddOffset(3, city1Offset.Value, 0); }
  public static void AddCity2(FlatBufferBuilder builder, Offset<GameProgress.Codegen.Modes> city2Offset) { builder.AddOffset(4, city2Offset.Value, 0); }
  public static void AddUtgard1(FlatBufferBuilder builder, Offset<GameProgress.Codegen.Modes> utgard1Offset) { builder.AddOffset(5, utgard1Offset.Value, 0); }
  public static void AddUtgard2(FlatBufferBuilder builder, Offset<GameProgress.Codegen.Modes> utgard2Offset) { builder.AddOffset(6, utgard2Offset.Value, 0); }
  public static void AddCave1(FlatBufferBuilder builder, Offset<GameProgress.Codegen.Modes> cave1Offset) { builder.AddOffset(7, cave1Offset.Value, 0); }
  public static void AddLake(FlatBufferBuilder builder, Offset<GameProgress.Codegen.Modes> lakeOffset) { builder.AddOffset(8, lakeOffset.Value, 0); }
  public static void AddPlaza(FlatBufferBuilder builder, Offset<GameProgress.Codegen.Modes> plazaOffset) { builder.AddOffset(9, plazaOffset.Value, 0); }
  public static void AddGrandmaster(FlatBufferBuilder builder, Offset<GameProgress.Codegen.Modes> grandmasterOffset) { builder.AddOffset(10, grandmasterOffset.Value, 0); }
  public static void AddCasino(FlatBufferBuilder builder, Offset<GameProgress.Codegen.Modes> casinoOffset) { builder.AddOffset(11, casinoOffset.Value, 0); }
  public static void AddForestFlooded(FlatBufferBuilder builder, Offset<GameProgress.Codegen.Modes> forestFloodedOffset) { builder.AddOffset(12, forestFloodedOffset.Value, 0); }
  public static void AddForestLava(FlatBufferBuilder builder, Offset<GameProgress.Codegen.Modes> forestLavaOffset) { builder.AddOffset(13, forestLavaOffset.Value, 0); }
  public static void AddDeforest1(FlatBufferBuilder builder, Offset<GameProgress.Codegen.Modes> deforest1Offset) { builder.AddOffset(14, deforest1Offset.Value, 0); }
  public static void AddBirthOfLevi(FlatBufferBuilder builder, Offset<GameProgress.Codegen.Modes> birthOfLeviOffset) { builder.AddOffset(15, birthOfLeviOffset.Value, 0); }
  public static void AddMews1k(FlatBufferBuilder builder, Offset<GameProgress.Codegen.Modes> mews1kOffset) { builder.AddOffset(16, mews1kOffset.Value, 0); }
  public static void AddRockyMountain(FlatBufferBuilder builder, Offset<GameProgress.Codegen.Modes> rockyMountainOffset) { builder.AddOffset(17, rockyMountainOffset.Value, 0); }
  public static void AddShiganshina(FlatBufferBuilder builder, Offset<GameProgress.Codegen.Modes> shiganshinaOffset) { builder.AddOffset(18, shiganshinaOffset.Value, 0); }
  public static void AddTrost(FlatBufferBuilder builder, Offset<GameProgress.Codegen.Modes> trostOffset) { builder.AddOffset(19, trostOffset.Value, 0); }
  public static void AddFuturisticForest(FlatBufferBuilder builder, Offset<GameProgress.Codegen.Modes> futuristicForestOffset) { builder.AddOffset(20, futuristicForestOffset.Value, 0); }
  public static void AddOther(FlatBufferBuilder builder, VectorOffset otherOffset) { builder.AddOffset(21, otherOffset.Value, 0); }
  public static VectorOffset CreateOtherVector(FlatBufferBuilder builder, Offset<GameProgress.Codegen.NamedMap>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateOtherVectorBlock(FlatBufferBuilder builder, Offset<GameProgress.Codegen.NamedMap>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOtherVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<GameProgress.Codegen.NamedMap>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOtherVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<GameProgress.Codegen.NamedMap>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartOtherVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameProgress.Codegen.Maps> EndMaps(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameProgress.Codegen.Maps>(o);
  }
  public static void FinishMapsBuffer(FlatBufferBuilder builder, Offset<GameProgress.Codegen.Maps> offset) { builder.Finish(offset.Value, "AOT2"); }
  public static void FinishSizePrefixedMapsBuffer(FlatBufferBuilder builder, Offset<GameProgress.Codegen.Maps> offset) { builder.FinishSizePrefixed(offset.Value, "AOT2"); }
  public MapsT UnPack() {
    var _o = new MapsT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MapsT _o) {
    _o.Forest1 = this.Forest1.HasValue ? this.Forest1.Value.UnPack() : null;
    _o.Forest2 = this.Forest2.HasValue ? this.Forest2.Value.UnPack() : null;
    _o.Forest3 = this.Forest3.HasValue ? this.Forest3.Value.UnPack() : null;
    _o.City1 = this.City1.HasValue ? this.City1.Value.UnPack() : null;
    _o.City2 = this.City2.HasValue ? this.City2.Value.UnPack() : null;
    _o.Utgard1 = this.Utgard1.HasValue ? this.Utgard1.Value.UnPack() : null;
    _o.Utgard2 = this.Utgard2.HasValue ? this.Utgard2.Value.UnPack() : null;
    _o.Cave1 = this.Cave1.HasValue ? this.Cave1.Value.UnPack() : null;
    _o.Lake = this.Lake.HasValue ? this.Lake.Value.UnPack() : null;
    _o.Plaza = this.Plaza.HasValue ? this.Plaza.Value.UnPack() : null;
    _o.Grandmaster = this.Grandmaster.HasValue ? this.Grandmaster.Value.UnPack() : null;
    _o.Casino = this.Casino.HasValue ? this.Casino.Value.UnPack() : null;
    _o.ForestFlooded = this.ForestFlooded.HasValue ? this.ForestFlooded.Value.UnPack() : null;
    _o.ForestLava = this.ForestLava.HasValue ? this.ForestLava.Value.UnPack() : null;
    _o.Deforest1 = this.Deforest1.HasValue ? this.Deforest1.Value.UnPack() : null;
    _o.BirthOfLevi = this.BirthOfLevi.HasValue ? this.BirthOfLevi.Value.UnPack() : null;
    _o.Mews1k = this.Mews1k.HasValue ? this.Mews1k.Value.UnPack() : null;
    _o.RockyMountain = this.RockyMountain.HasValue ? this.RockyMountain.Value.UnPack() : null;
    _o.Shiganshina = this.Shiganshina.HasValue ? this.Shiganshina.Value.UnPack() : null;
    _o.Trost = this.Trost.HasValue ? this.Trost.Value.UnPack() : null;
    _o.FuturisticForest = this.FuturisticForest.HasValue ? this.FuturisticForest.Value.UnPack() : null;
    _o.Other = new List<GameProgress.Codegen.NamedMapT>();
    for (var _j = 0; _j < this.OtherLength; ++_j) {_o.Other.Add(this.Other(_j).HasValue ? this.Other(_j).Value.UnPack() : null);}
  }
  public static Offset<GameProgress.Codegen.Maps> Pack(FlatBufferBuilder builder, MapsT _o) {
    if (_o == null) return default(Offset<GameProgress.Codegen.Maps>);
    var _forest1 = _o.Forest1 == null ? default(Offset<GameProgress.Codegen.Modes>) : GameProgress.Codegen.Modes.Pack(builder, _o.Forest1);
    var _forest2 = _o.Forest2 == null ? default(Offset<GameProgress.Codegen.Modes>) : GameProgress.Codegen.Modes.Pack(builder, _o.Forest2);
    var _forest3 = _o.Forest3 == null ? default(Offset<GameProgress.Codegen.Modes>) : GameProgress.Codegen.Modes.Pack(builder, _o.Forest3);
    var _city1 = _o.City1 == null ? default(Offset<GameProgress.Codegen.Modes>) : GameProgress.Codegen.Modes.Pack(builder, _o.City1);
    var _city2 = _o.City2 == null ? default(Offset<GameProgress.Codegen.Modes>) : GameProgress.Codegen.Modes.Pack(builder, _o.City2);
    var _utgard1 = _o.Utgard1 == null ? default(Offset<GameProgress.Codegen.Modes>) : GameProgress.Codegen.Modes.Pack(builder, _o.Utgard1);
    var _utgard2 = _o.Utgard2 == null ? default(Offset<GameProgress.Codegen.Modes>) : GameProgress.Codegen.Modes.Pack(builder, _o.Utgard2);
    var _cave1 = _o.Cave1 == null ? default(Offset<GameProgress.Codegen.Modes>) : GameProgress.Codegen.Modes.Pack(builder, _o.Cave1);
    var _lake = _o.Lake == null ? default(Offset<GameProgress.Codegen.Modes>) : GameProgress.Codegen.Modes.Pack(builder, _o.Lake);
    var _plaza = _o.Plaza == null ? default(Offset<GameProgress.Codegen.Modes>) : GameProgress.Codegen.Modes.Pack(builder, _o.Plaza);
    var _grandmaster = _o.Grandmaster == null ? default(Offset<GameProgress.Codegen.Modes>) : GameProgress.Codegen.Modes.Pack(builder, _o.Grandmaster);
    var _casino = _o.Casino == null ? default(Offset<GameProgress.Codegen.Modes>) : GameProgress.Codegen.Modes.Pack(builder, _o.Casino);
    var _forest_flooded = _o.ForestFlooded == null ? default(Offset<GameProgress.Codegen.Modes>) : GameProgress.Codegen.Modes.Pack(builder, _o.ForestFlooded);
    var _forest_lava = _o.ForestLava == null ? default(Offset<GameProgress.Codegen.Modes>) : GameProgress.Codegen.Modes.Pack(builder, _o.ForestLava);
    var _deforest1 = _o.Deforest1 == null ? default(Offset<GameProgress.Codegen.Modes>) : GameProgress.Codegen.Modes.Pack(builder, _o.Deforest1);
    var _birth_of_levi = _o.BirthOfLevi == null ? default(Offset<GameProgress.Codegen.Modes>) : GameProgress.Codegen.Modes.Pack(builder, _o.BirthOfLevi);
    var _mews_1k = _o.Mews1k == null ? default(Offset<GameProgress.Codegen.Modes>) : GameProgress.Codegen.Modes.Pack(builder, _o.Mews1k);
    var _rocky_mountain = _o.RockyMountain == null ? default(Offset<GameProgress.Codegen.Modes>) : GameProgress.Codegen.Modes.Pack(builder, _o.RockyMountain);
    var _shiganshina = _o.Shiganshina == null ? default(Offset<GameProgress.Codegen.Modes>) : GameProgress.Codegen.Modes.Pack(builder, _o.Shiganshina);
    var _trost = _o.Trost == null ? default(Offset<GameProgress.Codegen.Modes>) : GameProgress.Codegen.Modes.Pack(builder, _o.Trost);
    var _futuristic_forest = _o.FuturisticForest == null ? default(Offset<GameProgress.Codegen.Modes>) : GameProgress.Codegen.Modes.Pack(builder, _o.FuturisticForest);
    var _other = default(VectorOffset);
    if (_o.Other != null) {
      var __other = new Offset<GameProgress.Codegen.NamedMap>[_o.Other.Count];
      for (var _j = 0; _j < __other.Length; ++_j) { __other[_j] = GameProgress.Codegen.NamedMap.Pack(builder, _o.Other[_j]); }
      _other = CreateOtherVector(builder, __other);
    }
    return CreateMaps(
      builder,
      _forest1,
      _forest2,
      _forest3,
      _city1,
      _city2,
      _utgard1,
      _utgard2,
      _cave1,
      _lake,
      _plaza,
      _grandmaster,
      _casino,
      _forest_flooded,
      _forest_lava,
      _deforest1,
      _birth_of_levi,
      _mews_1k,
      _rocky_mountain,
      _shiganshina,
      _trost,
      _futuristic_forest,
      _other);
  }
}

public class MapsT
{
  public GameProgress.Codegen.ModesT Forest1 { get; set; }
  public GameProgress.Codegen.ModesT Forest2 { get; set; }
  public GameProgress.Codegen.ModesT Forest3 { get; set; }
  public GameProgress.Codegen.ModesT City1 { get; set; }
  public GameProgress.Codegen.ModesT City2 { get; set; }
  public GameProgress.Codegen.ModesT Utgard1 { get; set; }
  public GameProgress.Codegen.ModesT Utgard2 { get; set; }
  public GameProgress.Codegen.ModesT Cave1 { get; set; }
  public GameProgress.Codegen.ModesT Lake { get; set; }
  public GameProgress.Codegen.ModesT Plaza { get; set; }
  public GameProgress.Codegen.ModesT Grandmaster { get; set; }
  public GameProgress.Codegen.ModesT Casino { get; set; }
  public GameProgress.Codegen.ModesT ForestFlooded { get; set; }
  public GameProgress.Codegen.ModesT ForestLava { get; set; }
  public GameProgress.Codegen.ModesT Deforest1 { get; set; }
  public GameProgress.Codegen.ModesT BirthOfLevi { get; set; }
  public GameProgress.Codegen.ModesT Mews1k { get; set; }
  public GameProgress.Codegen.ModesT RockyMountain { get; set; }
  public GameProgress.Codegen.ModesT Shiganshina { get; set; }
  public GameProgress.Codegen.ModesT Trost { get; set; }
  public GameProgress.Codegen.ModesT FuturisticForest { get; set; }
  public List<GameProgress.Codegen.NamedMapT> Other { get; set; }

  public MapsT() {
    this.Forest1 = null;
    this.Forest2 = null;
    this.Forest3 = null;
    this.City1 = null;
    this.City2 = null;
    this.Utgard1 = null;
    this.Utgard2 = null;
    this.Cave1 = null;
    this.Lake = null;
    this.Plaza = null;
    this.Grandmaster = null;
    this.Casino = null;
    this.ForestFlooded = null;
    this.ForestLava = null;
    this.Deforest1 = null;
    this.BirthOfLevi = null;
    this.Mews1k = null;
    this.RockyMountain = null;
    this.Shiganshina = null;
    this.Trost = null;
    this.FuturisticForest = null;
    this.Other = null;
  }
  public static MapsT DeserializeFromBinary(byte[] fbBuffer) {
    return Maps.GetRootAsMaps(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    Maps.FinishMapsBuffer(fbb, Maps.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class MapsVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyTable(tablePos, 4 /*Forest1*/, GameProgress.Codegen.ModesVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 6 /*Forest2*/, GameProgress.Codegen.ModesVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 8 /*Forest3*/, GameProgress.Codegen.ModesVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 10 /*City1*/, GameProgress.Codegen.ModesVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 12 /*City2*/, GameProgress.Codegen.ModesVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 14 /*Utgard1*/, GameProgress.Codegen.ModesVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 16 /*Utgard2*/, GameProgress.Codegen.ModesVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 18 /*Cave1*/, GameProgress.Codegen.ModesVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 20 /*Lake*/, GameProgress.Codegen.ModesVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 22 /*Plaza*/, GameProgress.Codegen.ModesVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 24 /*Grandmaster*/, GameProgress.Codegen.ModesVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 26 /*Casino*/, GameProgress.Codegen.ModesVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 28 /*ForestFlooded*/, GameProgress.Codegen.ModesVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 30 /*ForestLava*/, GameProgress.Codegen.ModesVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 32 /*Deforest1*/, GameProgress.Codegen.ModesVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 34 /*BirthOfLevi*/, GameProgress.Codegen.ModesVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 36 /*Mews1k*/, GameProgress.Codegen.ModesVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 38 /*RockyMountain*/, GameProgress.Codegen.ModesVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 40 /*Shiganshina*/, GameProgress.Codegen.ModesVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 42 /*Trost*/, GameProgress.Codegen.ModesVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 44 /*FuturisticForest*/, GameProgress.Codegen.ModesVerify.Verify, false)
      && verifier.VerifyVectorOfTables(tablePos, 46 /*Other*/, GameProgress.Codegen.NamedMapVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
