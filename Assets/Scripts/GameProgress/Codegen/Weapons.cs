// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameProgress.Codegen
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Weapons : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static Weapons GetRootAsWeapons(ByteBuffer _bb) { return GetRootAsWeapons(_bb, new Weapons()); }
  public static Weapons GetRootAsWeapons(ByteBuffer _bb, Weapons obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Weapons __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameProgress.Codegen.Specials? Blade { get { int o = __p.__offset(4); return o != 0 ? (GameProgress.Codegen.Specials?)(new GameProgress.Codegen.Specials()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public GameProgress.Codegen.Specials? Ahss { get { int o = __p.__offset(6); return o != 0 ? (GameProgress.Codegen.Specials?)(new GameProgress.Codegen.Specials()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public GameProgress.Codegen.Specials? Thunderspear { get { int o = __p.__offset(8); return o != 0 ? (GameProgress.Codegen.Specials?)(new GameProgress.Codegen.Specials()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public GameProgress.Codegen.Specials? Apg { get { int o = __p.__offset(10); return o != 0 ? (GameProgress.Codegen.Specials?)(new GameProgress.Codegen.Specials()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public GameProgress.Codegen.Specials? Titan { get { int o = __p.__offset(12); return o != 0 ? (GameProgress.Codegen.Specials?)(new GameProgress.Codegen.Specials()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public GameProgress.Codegen.Specials? Shifter { get { int o = __p.__offset(14); return o != 0 ? (GameProgress.Codegen.Specials?)(new GameProgress.Codegen.Specials()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public GameProgress.Codegen.Specials? Other { get { int o = __p.__offset(16); return o != 0 ? (GameProgress.Codegen.Specials?)(new GameProgress.Codegen.Specials()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<GameProgress.Codegen.Weapons> CreateWeapons(FlatBufferBuilder builder,
      Offset<GameProgress.Codegen.Specials> bladeOffset = default(Offset<GameProgress.Codegen.Specials>),
      Offset<GameProgress.Codegen.Specials> ahssOffset = default(Offset<GameProgress.Codegen.Specials>),
      Offset<GameProgress.Codegen.Specials> thunderspearOffset = default(Offset<GameProgress.Codegen.Specials>),
      Offset<GameProgress.Codegen.Specials> apgOffset = default(Offset<GameProgress.Codegen.Specials>),
      Offset<GameProgress.Codegen.Specials> titanOffset = default(Offset<GameProgress.Codegen.Specials>),
      Offset<GameProgress.Codegen.Specials> shifterOffset = default(Offset<GameProgress.Codegen.Specials>),
      Offset<GameProgress.Codegen.Specials> otherOffset = default(Offset<GameProgress.Codegen.Specials>)) {
    builder.StartTable(7);
    Weapons.AddOther(builder, otherOffset);
    Weapons.AddShifter(builder, shifterOffset);
    Weapons.AddTitan(builder, titanOffset);
    Weapons.AddApg(builder, apgOffset);
    Weapons.AddThunderspear(builder, thunderspearOffset);
    Weapons.AddAhss(builder, ahssOffset);
    Weapons.AddBlade(builder, bladeOffset);
    return Weapons.EndWeapons(builder);
  }

  public static void StartWeapons(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddBlade(FlatBufferBuilder builder, Offset<GameProgress.Codegen.Specials> bladeOffset) { builder.AddOffset(0, bladeOffset.Value, 0); }
  public static void AddAhss(FlatBufferBuilder builder, Offset<GameProgress.Codegen.Specials> ahssOffset) { builder.AddOffset(1, ahssOffset.Value, 0); }
  public static void AddThunderspear(FlatBufferBuilder builder, Offset<GameProgress.Codegen.Specials> thunderspearOffset) { builder.AddOffset(2, thunderspearOffset.Value, 0); }
  public static void AddApg(FlatBufferBuilder builder, Offset<GameProgress.Codegen.Specials> apgOffset) { builder.AddOffset(3, apgOffset.Value, 0); }
  public static void AddTitan(FlatBufferBuilder builder, Offset<GameProgress.Codegen.Specials> titanOffset) { builder.AddOffset(4, titanOffset.Value, 0); }
  public static void AddShifter(FlatBufferBuilder builder, Offset<GameProgress.Codegen.Specials> shifterOffset) { builder.AddOffset(5, shifterOffset.Value, 0); }
  public static void AddOther(FlatBufferBuilder builder, Offset<GameProgress.Codegen.Specials> otherOffset) { builder.AddOffset(6, otherOffset.Value, 0); }
  public static Offset<GameProgress.Codegen.Weapons> EndWeapons(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameProgress.Codegen.Weapons>(o);
  }
  public WeaponsT UnPack() {
    var _o = new WeaponsT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(WeaponsT _o) {
    _o.Blade = this.Blade.HasValue ? this.Blade.Value.UnPack() : null;
    _o.Ahss = this.Ahss.HasValue ? this.Ahss.Value.UnPack() : null;
    _o.Thunderspear = this.Thunderspear.HasValue ? this.Thunderspear.Value.UnPack() : null;
    _o.Apg = this.Apg.HasValue ? this.Apg.Value.UnPack() : null;
    _o.Titan = this.Titan.HasValue ? this.Titan.Value.UnPack() : null;
    _o.Shifter = this.Shifter.HasValue ? this.Shifter.Value.UnPack() : null;
    _o.Other = this.Other.HasValue ? this.Other.Value.UnPack() : null;
  }
  public static Offset<GameProgress.Codegen.Weapons> Pack(FlatBufferBuilder builder, WeaponsT _o) {
    if (_o == null) return default(Offset<GameProgress.Codegen.Weapons>);
    var _blade = _o.Blade == null ? default(Offset<GameProgress.Codegen.Specials>) : GameProgress.Codegen.Specials.Pack(builder, _o.Blade);
    var _ahss = _o.Ahss == null ? default(Offset<GameProgress.Codegen.Specials>) : GameProgress.Codegen.Specials.Pack(builder, _o.Ahss);
    var _thunderspear = _o.Thunderspear == null ? default(Offset<GameProgress.Codegen.Specials>) : GameProgress.Codegen.Specials.Pack(builder, _o.Thunderspear);
    var _apg = _o.Apg == null ? default(Offset<GameProgress.Codegen.Specials>) : GameProgress.Codegen.Specials.Pack(builder, _o.Apg);
    var _titan = _o.Titan == null ? default(Offset<GameProgress.Codegen.Specials>) : GameProgress.Codegen.Specials.Pack(builder, _o.Titan);
    var _shifter = _o.Shifter == null ? default(Offset<GameProgress.Codegen.Specials>) : GameProgress.Codegen.Specials.Pack(builder, _o.Shifter);
    var _other = _o.Other == null ? default(Offset<GameProgress.Codegen.Specials>) : GameProgress.Codegen.Specials.Pack(builder, _o.Other);
    return CreateWeapons(
      builder,
      _blade,
      _ahss,
      _thunderspear,
      _apg,
      _titan,
      _shifter,
      _other);
  }
}

public class WeaponsT
{
  public GameProgress.Codegen.SpecialsT Blade { get; set; }
  public GameProgress.Codegen.SpecialsT Ahss { get; set; }
  public GameProgress.Codegen.SpecialsT Thunderspear { get; set; }
  public GameProgress.Codegen.SpecialsT Apg { get; set; }
  public GameProgress.Codegen.SpecialsT Titan { get; set; }
  public GameProgress.Codegen.SpecialsT Shifter { get; set; }
  public GameProgress.Codegen.SpecialsT Other { get; set; }

  public WeaponsT() {
    this.Blade = null;
    this.Ahss = null;
    this.Thunderspear = null;
    this.Apg = null;
    this.Titan = null;
    this.Shifter = null;
    this.Other = null;
  }
}


static public class WeaponsVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyTable(tablePos, 4 /*Blade*/, GameProgress.Codegen.SpecialsVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 6 /*Ahss*/, GameProgress.Codegen.SpecialsVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 8 /*Thunderspear*/, GameProgress.Codegen.SpecialsVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 10 /*Apg*/, GameProgress.Codegen.SpecialsVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 12 /*Titan*/, GameProgress.Codegen.SpecialsVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 14 /*Shifter*/, GameProgress.Codegen.SpecialsVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 16 /*Other*/, GameProgress.Codegen.SpecialsVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
