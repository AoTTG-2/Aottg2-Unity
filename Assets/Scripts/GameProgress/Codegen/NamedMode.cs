// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameProgress.Codegen
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct NamedMode : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static NamedMode GetRootAsNamedMode(ByteBuffer _bb) { return GetRootAsNamedMode(_bb, new NamedMode()); }
  public static NamedMode GetRootAsNamedMode(ByteBuffer _bb, NamedMode obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public NamedMode __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public GameProgress.Codegen.Enemies? Enemies { get { int o = __p.__offset(6); return o != 0 ? (GameProgress.Codegen.Enemies?)(new GameProgress.Codegen.Enemies()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<GameProgress.Codegen.NamedMode> CreateNamedMode(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      Offset<GameProgress.Codegen.Enemies> enemiesOffset = default(Offset<GameProgress.Codegen.Enemies>)) {
    builder.StartTable(2);
    NamedMode.AddEnemies(builder, enemiesOffset);
    NamedMode.AddName(builder, nameOffset);
    return NamedMode.EndNamedMode(builder);
  }

  public static void StartNamedMode(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddEnemies(FlatBufferBuilder builder, Offset<GameProgress.Codegen.Enemies> enemiesOffset) { builder.AddOffset(1, enemiesOffset.Value, 0); }
  public static Offset<GameProgress.Codegen.NamedMode> EndNamedMode(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameProgress.Codegen.NamedMode>(o);
  }
  public NamedModeT UnPack() {
    var _o = new NamedModeT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(NamedModeT _o) {
    _o.Name = this.Name;
    _o.Enemies = this.Enemies.HasValue ? this.Enemies.Value.UnPack() : null;
  }
  public static Offset<GameProgress.Codegen.NamedMode> Pack(FlatBufferBuilder builder, NamedModeT _o) {
    if (_o == null) return default(Offset<GameProgress.Codegen.NamedMode>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _enemies = _o.Enemies == null ? default(Offset<GameProgress.Codegen.Enemies>) : GameProgress.Codegen.Enemies.Pack(builder, _o.Enemies);
    return CreateNamedMode(
      builder,
      _name,
      _enemies);
  }
}

public class NamedModeT
{
  public string Name { get; set; }
  public GameProgress.Codegen.EnemiesT Enemies { get; set; }

  public NamedModeT() {
    this.Name = null;
    this.Enemies = null;
  }
}


static public class NamedModeVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Name*/, false)
      && verifier.VerifyTable(tablePos, 6 /*Enemies*/, GameProgress.Codegen.EnemiesVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
