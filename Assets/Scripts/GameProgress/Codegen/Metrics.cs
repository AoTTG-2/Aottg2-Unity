// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameProgress.Codegen
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Metrics : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static Metrics GetRootAsMetrics(ByteBuffer _bb) { return GetRootAsMetrics(_bb, new Metrics()); }
  public static Metrics GetRootAsMetrics(ByteBuffer _bb, Metrics obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Metrics __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Kills { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public ulong TotalDamage { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public uint HighestDamage { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<GameProgress.Codegen.Metrics> CreateMetrics(FlatBufferBuilder builder,
      uint kills = 0,
      ulong total_damage = 0,
      uint highest_damage = 0) {
    builder.StartTable(3);
    Metrics.AddTotalDamage(builder, total_damage);
    Metrics.AddHighestDamage(builder, highest_damage);
    Metrics.AddKills(builder, kills);
    return Metrics.EndMetrics(builder);
  }

  public static void StartMetrics(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddKills(FlatBufferBuilder builder, uint kills) { builder.AddUint(0, kills, 0); }
  public static void AddTotalDamage(FlatBufferBuilder builder, ulong totalDamage) { builder.AddUlong(1, totalDamage, 0); }
  public static void AddHighestDamage(FlatBufferBuilder builder, uint highestDamage) { builder.AddUint(2, highestDamage, 0); }
  public static Offset<GameProgress.Codegen.Metrics> EndMetrics(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameProgress.Codegen.Metrics>(o);
  }
  public MetricsT UnPack() {
    var _o = new MetricsT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MetricsT _o) {
    _o.Kills = this.Kills;
    _o.TotalDamage = this.TotalDamage;
    _o.HighestDamage = this.HighestDamage;
  }
  public static Offset<GameProgress.Codegen.Metrics> Pack(FlatBufferBuilder builder, MetricsT _o) {
    if (_o == null) return default(Offset<GameProgress.Codegen.Metrics>);
    return CreateMetrics(
      builder,
      _o.Kills,
      _o.TotalDamage,
      _o.HighestDamage);
  }
}

public class MetricsT
{
  public uint Kills { get; set; }
  public ulong TotalDamage { get; set; }
  public uint HighestDamage { get; set; }

  public MetricsT() {
    this.Kills = 0;
    this.TotalDamage = 0;
    this.HighestDamage = 0;
  }
}


static public class MetricsVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Kills*/, 4 /*uint*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*TotalDamage*/, 8 /*ulong*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*HighestDamage*/, 4 /*uint*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
