// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameProgress.Codegen
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Specials : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static Specials GetRootAsSpecials(ByteBuffer _bb) { return GetRootAsSpecials(_bb, new Specials()); }
  public static Specials GetRootAsSpecials(ByteBuffer _bb, Specials obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Specials __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameProgress.Codegen.Metrics? None { get { int o = __p.__offset(4); return o != 0 ? (GameProgress.Codegen.Metrics?)(new GameProgress.Codegen.Metrics()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public GameProgress.Codegen.Metrics? Downstrike { get { int o = __p.__offset(6); return o != 0 ? (GameProgress.Codegen.Metrics?)(new GameProgress.Codegen.Metrics()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public GameProgress.Codegen.Metrics? Spin1 { get { int o = __p.__offset(8); return o != 0 ? (GameProgress.Codegen.Metrics?)(new GameProgress.Codegen.Metrics()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public GameProgress.Codegen.Metrics? Spin2 { get { int o = __p.__offset(10); return o != 0 ? (GameProgress.Codegen.Metrics?)(new GameProgress.Codegen.Metrics()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public GameProgress.Codegen.Metrics? Spin3 { get { int o = __p.__offset(12); return o != 0 ? (GameProgress.Codegen.Metrics?)(new GameProgress.Codegen.Metrics()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public GameProgress.Codegen.Metrics? Bladethrow { get { int o = __p.__offset(14); return o != 0 ? (GameProgress.Codegen.Metrics?)(new GameProgress.Codegen.Metrics()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public GameProgress.Codegen.Metrics? Twinshot { get { int o = __p.__offset(16); return o != 0 ? (GameProgress.Codegen.Metrics?)(new GameProgress.Codegen.Metrics()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public GameProgress.Codegen.Metrics? Stock { get { int o = __p.__offset(18); return o != 0 ? (GameProgress.Codegen.Metrics?)(new GameProgress.Codegen.Metrics()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public GameProgress.Codegen.Metrics? Eren { get { int o = __p.__offset(20); return o != 0 ? (GameProgress.Codegen.Metrics?)(new GameProgress.Codegen.Metrics()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public GameProgress.Codegen.Metrics? Annie { get { int o = __p.__offset(22); return o != 0 ? (GameProgress.Codegen.Metrics?)(new GameProgress.Codegen.Metrics()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public GameProgress.Codegen.Metrics? Other { get { int o = __p.__offset(24); return o != 0 ? (GameProgress.Codegen.Metrics?)(new GameProgress.Codegen.Metrics()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<GameProgress.Codegen.Specials> CreateSpecials(FlatBufferBuilder builder,
      Offset<GameProgress.Codegen.Metrics> noneOffset = default(Offset<GameProgress.Codegen.Metrics>),
      Offset<GameProgress.Codegen.Metrics> downstrikeOffset = default(Offset<GameProgress.Codegen.Metrics>),
      Offset<GameProgress.Codegen.Metrics> spin1Offset = default(Offset<GameProgress.Codegen.Metrics>),
      Offset<GameProgress.Codegen.Metrics> spin2Offset = default(Offset<GameProgress.Codegen.Metrics>),
      Offset<GameProgress.Codegen.Metrics> spin3Offset = default(Offset<GameProgress.Codegen.Metrics>),
      Offset<GameProgress.Codegen.Metrics> bladethrowOffset = default(Offset<GameProgress.Codegen.Metrics>),
      Offset<GameProgress.Codegen.Metrics> twinshotOffset = default(Offset<GameProgress.Codegen.Metrics>),
      Offset<GameProgress.Codegen.Metrics> stockOffset = default(Offset<GameProgress.Codegen.Metrics>),
      Offset<GameProgress.Codegen.Metrics> erenOffset = default(Offset<GameProgress.Codegen.Metrics>),
      Offset<GameProgress.Codegen.Metrics> annieOffset = default(Offset<GameProgress.Codegen.Metrics>),
      Offset<GameProgress.Codegen.Metrics> otherOffset = default(Offset<GameProgress.Codegen.Metrics>)) {
    builder.StartTable(11);
    Specials.AddOther(builder, otherOffset);
    Specials.AddAnnie(builder, annieOffset);
    Specials.AddEren(builder, erenOffset);
    Specials.AddStock(builder, stockOffset);
    Specials.AddTwinshot(builder, twinshotOffset);
    Specials.AddBladethrow(builder, bladethrowOffset);
    Specials.AddSpin3(builder, spin3Offset);
    Specials.AddSpin2(builder, spin2Offset);
    Specials.AddSpin1(builder, spin1Offset);
    Specials.AddDownstrike(builder, downstrikeOffset);
    Specials.AddNone(builder, noneOffset);
    return Specials.EndSpecials(builder);
  }

  public static void StartSpecials(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddNone(FlatBufferBuilder builder, Offset<GameProgress.Codegen.Metrics> noneOffset) { builder.AddOffset(0, noneOffset.Value, 0); }
  public static void AddDownstrike(FlatBufferBuilder builder, Offset<GameProgress.Codegen.Metrics> downstrikeOffset) { builder.AddOffset(1, downstrikeOffset.Value, 0); }
  public static void AddSpin1(FlatBufferBuilder builder, Offset<GameProgress.Codegen.Metrics> spin1Offset) { builder.AddOffset(2, spin1Offset.Value, 0); }
  public static void AddSpin2(FlatBufferBuilder builder, Offset<GameProgress.Codegen.Metrics> spin2Offset) { builder.AddOffset(3, spin2Offset.Value, 0); }
  public static void AddSpin3(FlatBufferBuilder builder, Offset<GameProgress.Codegen.Metrics> spin3Offset) { builder.AddOffset(4, spin3Offset.Value, 0); }
  public static void AddBladethrow(FlatBufferBuilder builder, Offset<GameProgress.Codegen.Metrics> bladethrowOffset) { builder.AddOffset(5, bladethrowOffset.Value, 0); }
  public static void AddTwinshot(FlatBufferBuilder builder, Offset<GameProgress.Codegen.Metrics> twinshotOffset) { builder.AddOffset(6, twinshotOffset.Value, 0); }
  public static void AddStock(FlatBufferBuilder builder, Offset<GameProgress.Codegen.Metrics> stockOffset) { builder.AddOffset(7, stockOffset.Value, 0); }
  public static void AddEren(FlatBufferBuilder builder, Offset<GameProgress.Codegen.Metrics> erenOffset) { builder.AddOffset(8, erenOffset.Value, 0); }
  public static void AddAnnie(FlatBufferBuilder builder, Offset<GameProgress.Codegen.Metrics> annieOffset) { builder.AddOffset(9, annieOffset.Value, 0); }
  public static void AddOther(FlatBufferBuilder builder, Offset<GameProgress.Codegen.Metrics> otherOffset) { builder.AddOffset(10, otherOffset.Value, 0); }
  public static Offset<GameProgress.Codegen.Specials> EndSpecials(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameProgress.Codegen.Specials>(o);
  }
  public SpecialsT UnPack() {
    var _o = new SpecialsT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SpecialsT _o) {
    _o.None = this.None.HasValue ? this.None.Value.UnPack() : null;
    _o.Downstrike = this.Downstrike.HasValue ? this.Downstrike.Value.UnPack() : null;
    _o.Spin1 = this.Spin1.HasValue ? this.Spin1.Value.UnPack() : null;
    _o.Spin2 = this.Spin2.HasValue ? this.Spin2.Value.UnPack() : null;
    _o.Spin3 = this.Spin3.HasValue ? this.Spin3.Value.UnPack() : null;
    _o.Bladethrow = this.Bladethrow.HasValue ? this.Bladethrow.Value.UnPack() : null;
    _o.Twinshot = this.Twinshot.HasValue ? this.Twinshot.Value.UnPack() : null;
    _o.Stock = this.Stock.HasValue ? this.Stock.Value.UnPack() : null;
    _o.Eren = this.Eren.HasValue ? this.Eren.Value.UnPack() : null;
    _o.Annie = this.Annie.HasValue ? this.Annie.Value.UnPack() : null;
    _o.Other = this.Other.HasValue ? this.Other.Value.UnPack() : null;
  }
  public static Offset<GameProgress.Codegen.Specials> Pack(FlatBufferBuilder builder, SpecialsT _o) {
    if (_o == null) return default(Offset<GameProgress.Codegen.Specials>);
    var _none = _o.None == null ? default(Offset<GameProgress.Codegen.Metrics>) : GameProgress.Codegen.Metrics.Pack(builder, _o.None);
    var _downstrike = _o.Downstrike == null ? default(Offset<GameProgress.Codegen.Metrics>) : GameProgress.Codegen.Metrics.Pack(builder, _o.Downstrike);
    var _spin1 = _o.Spin1 == null ? default(Offset<GameProgress.Codegen.Metrics>) : GameProgress.Codegen.Metrics.Pack(builder, _o.Spin1);
    var _spin2 = _o.Spin2 == null ? default(Offset<GameProgress.Codegen.Metrics>) : GameProgress.Codegen.Metrics.Pack(builder, _o.Spin2);
    var _spin3 = _o.Spin3 == null ? default(Offset<GameProgress.Codegen.Metrics>) : GameProgress.Codegen.Metrics.Pack(builder, _o.Spin3);
    var _bladethrow = _o.Bladethrow == null ? default(Offset<GameProgress.Codegen.Metrics>) : GameProgress.Codegen.Metrics.Pack(builder, _o.Bladethrow);
    var _twinshot = _o.Twinshot == null ? default(Offset<GameProgress.Codegen.Metrics>) : GameProgress.Codegen.Metrics.Pack(builder, _o.Twinshot);
    var _stock = _o.Stock == null ? default(Offset<GameProgress.Codegen.Metrics>) : GameProgress.Codegen.Metrics.Pack(builder, _o.Stock);
    var _eren = _o.Eren == null ? default(Offset<GameProgress.Codegen.Metrics>) : GameProgress.Codegen.Metrics.Pack(builder, _o.Eren);
    var _annie = _o.Annie == null ? default(Offset<GameProgress.Codegen.Metrics>) : GameProgress.Codegen.Metrics.Pack(builder, _o.Annie);
    var _other = _o.Other == null ? default(Offset<GameProgress.Codegen.Metrics>) : GameProgress.Codegen.Metrics.Pack(builder, _o.Other);
    return CreateSpecials(
      builder,
      _none,
      _downstrike,
      _spin1,
      _spin2,
      _spin3,
      _bladethrow,
      _twinshot,
      _stock,
      _eren,
      _annie,
      _other);
  }
}

public class SpecialsT
{
  public GameProgress.Codegen.MetricsT None { get; set; }
  public GameProgress.Codegen.MetricsT Downstrike { get; set; }
  public GameProgress.Codegen.MetricsT Spin1 { get; set; }
  public GameProgress.Codegen.MetricsT Spin2 { get; set; }
  public GameProgress.Codegen.MetricsT Spin3 { get; set; }
  public GameProgress.Codegen.MetricsT Bladethrow { get; set; }
  public GameProgress.Codegen.MetricsT Twinshot { get; set; }
  public GameProgress.Codegen.MetricsT Stock { get; set; }
  public GameProgress.Codegen.MetricsT Eren { get; set; }
  public GameProgress.Codegen.MetricsT Annie { get; set; }
  public GameProgress.Codegen.MetricsT Other { get; set; }

  public SpecialsT() {
    this.None = null;
    this.Downstrike = null;
    this.Spin1 = null;
    this.Spin2 = null;
    this.Spin3 = null;
    this.Bladethrow = null;
    this.Twinshot = null;
    this.Stock = null;
    this.Eren = null;
    this.Annie = null;
    this.Other = null;
  }
}


static public class SpecialsVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyTable(tablePos, 4 /*None*/, GameProgress.Codegen.MetricsVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 6 /*Downstrike*/, GameProgress.Codegen.MetricsVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 8 /*Spin1*/, GameProgress.Codegen.MetricsVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 10 /*Spin2*/, GameProgress.Codegen.MetricsVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 12 /*Spin3*/, GameProgress.Codegen.MetricsVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 14 /*Bladethrow*/, GameProgress.Codegen.MetricsVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 16 /*Twinshot*/, GameProgress.Codegen.MetricsVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 18 /*Stock*/, GameProgress.Codegen.MetricsVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 20 /*Eren*/, GameProgress.Codegen.MetricsVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 22 /*Annie*/, GameProgress.Codegen.MetricsVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 24 /*Other*/, GameProgress.Codegen.MetricsVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
