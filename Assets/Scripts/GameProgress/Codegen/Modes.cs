// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameProgress.Codegen
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Modes : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static Modes GetRootAsModes(ByteBuffer _bb) { return GetRootAsModes(_bb, new Modes()); }
  public static Modes GetRootAsModes(ByteBuffer _bb, Modes obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Modes __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameProgress.Codegen.Enemies? AhssPvp { get { int o = __p.__offset(4); return o != 0 ? (GameProgress.Codegen.Enemies?)(new GameProgress.Codegen.Enemies()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public GameProgress.Codegen.Enemies? ApgPvp { get { int o = __p.__offset(6); return o != 0 ? (GameProgress.Codegen.Enemies?)(new GameProgress.Codegen.Enemies()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public GameProgress.Codegen.Enemies? Base { get { int o = __p.__offset(8); return o != 0 ? (GameProgress.Codegen.Enemies?)(new GameProgress.Codegen.Enemies()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public GameProgress.Codegen.Enemies? BladePvp { get { int o = __p.__offset(10); return o != 0 ? (GameProgress.Codegen.Enemies?)(new GameProgress.Codegen.Enemies()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public GameProgress.Codegen.Enemies? CageFight { get { int o = __p.__offset(12); return o != 0 ? (GameProgress.Codegen.Enemies?)(new GameProgress.Codegen.Enemies()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public GameProgress.Codegen.Enemies? Cranked { get { int o = __p.__offset(14); return o != 0 ? (GameProgress.Codegen.Enemies?)(new GameProgress.Codegen.Enemies()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public GameProgress.Codegen.Enemies? Endless { get { int o = __p.__offset(16); return o != 0 ? (GameProgress.Codegen.Enemies?)(new GameProgress.Codegen.Enemies()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public GameProgress.Codegen.Enemies? None { get { int o = __p.__offset(18); return o != 0 ? (GameProgress.Codegen.Enemies?)(new GameProgress.Codegen.Enemies()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public GameProgress.Codegen.Enemies? Racing { get { int o = __p.__offset(20); return o != 0 ? (GameProgress.Codegen.Enemies?)(new GameProgress.Codegen.Enemies()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public GameProgress.Codegen.Enemies? Survive { get { int o = __p.__offset(22); return o != 0 ? (GameProgress.Codegen.Enemies?)(new GameProgress.Codegen.Enemies()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public GameProgress.Codegen.Enemies? ThunderspearPvp { get { int o = __p.__offset(24); return o != 0 ? (GameProgress.Codegen.Enemies?)(new GameProgress.Codegen.Enemies()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public GameProgress.Codegen.Enemies? TitanExplode { get { int o = __p.__offset(26); return o != 0 ? (GameProgress.Codegen.Enemies?)(new GameProgress.Codegen.Enemies()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public GameProgress.Codegen.Enemies? Waves { get { int o = __p.__offset(28); return o != 0 ? (GameProgress.Codegen.Enemies?)(new GameProgress.Codegen.Enemies()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public GameProgress.Codegen.NamedMode? Other(int j) { int o = __p.__offset(30); return o != 0 ? (GameProgress.Codegen.NamedMode?)(new GameProgress.Codegen.NamedMode()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int OtherLength { get { int o = __p.__offset(30); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameProgress.Codegen.Modes> CreateModes(FlatBufferBuilder builder,
      Offset<GameProgress.Codegen.Enemies> ahss_pvpOffset = default(Offset<GameProgress.Codegen.Enemies>),
      Offset<GameProgress.Codegen.Enemies> apg_pvpOffset = default(Offset<GameProgress.Codegen.Enemies>),
      Offset<GameProgress.Codegen.Enemies> @baseOffset = default(Offset<GameProgress.Codegen.Enemies>),
      Offset<GameProgress.Codegen.Enemies> blade_pvpOffset = default(Offset<GameProgress.Codegen.Enemies>),
      Offset<GameProgress.Codegen.Enemies> cage_fightOffset = default(Offset<GameProgress.Codegen.Enemies>),
      Offset<GameProgress.Codegen.Enemies> crankedOffset = default(Offset<GameProgress.Codegen.Enemies>),
      Offset<GameProgress.Codegen.Enemies> endlessOffset = default(Offset<GameProgress.Codegen.Enemies>),
      Offset<GameProgress.Codegen.Enemies> noneOffset = default(Offset<GameProgress.Codegen.Enemies>),
      Offset<GameProgress.Codegen.Enemies> racingOffset = default(Offset<GameProgress.Codegen.Enemies>),
      Offset<GameProgress.Codegen.Enemies> surviveOffset = default(Offset<GameProgress.Codegen.Enemies>),
      Offset<GameProgress.Codegen.Enemies> thunderspear_pvpOffset = default(Offset<GameProgress.Codegen.Enemies>),
      Offset<GameProgress.Codegen.Enemies> titan_explodeOffset = default(Offset<GameProgress.Codegen.Enemies>),
      Offset<GameProgress.Codegen.Enemies> wavesOffset = default(Offset<GameProgress.Codegen.Enemies>),
      VectorOffset otherOffset = default(VectorOffset)) {
    builder.StartTable(14);
    Modes.AddOther(builder, otherOffset);
    Modes.AddWaves(builder, wavesOffset);
    Modes.AddTitanExplode(builder, titan_explodeOffset);
    Modes.AddThunderspearPvp(builder, thunderspear_pvpOffset);
    Modes.AddSurvive(builder, surviveOffset);
    Modes.AddRacing(builder, racingOffset);
    Modes.AddNone(builder, noneOffset);
    Modes.AddEndless(builder, endlessOffset);
    Modes.AddCranked(builder, crankedOffset);
    Modes.AddCageFight(builder, cage_fightOffset);
    Modes.AddBladePvp(builder, blade_pvpOffset);
    Modes.AddBase(builder, @baseOffset);
    Modes.AddApgPvp(builder, apg_pvpOffset);
    Modes.AddAhssPvp(builder, ahss_pvpOffset);
    return Modes.EndModes(builder);
  }

  public static void StartModes(FlatBufferBuilder builder) { builder.StartTable(14); }
  public static void AddAhssPvp(FlatBufferBuilder builder, Offset<GameProgress.Codegen.Enemies> ahssPvpOffset) { builder.AddOffset(0, ahssPvpOffset.Value, 0); }
  public static void AddApgPvp(FlatBufferBuilder builder, Offset<GameProgress.Codegen.Enemies> apgPvpOffset) { builder.AddOffset(1, apgPvpOffset.Value, 0); }
  public static void AddBase(FlatBufferBuilder builder, Offset<GameProgress.Codegen.Enemies> baseOffset) { builder.AddOffset(2, baseOffset.Value, 0); }
  public static void AddBladePvp(FlatBufferBuilder builder, Offset<GameProgress.Codegen.Enemies> bladePvpOffset) { builder.AddOffset(3, bladePvpOffset.Value, 0); }
  public static void AddCageFight(FlatBufferBuilder builder, Offset<GameProgress.Codegen.Enemies> cageFightOffset) { builder.AddOffset(4, cageFightOffset.Value, 0); }
  public static void AddCranked(FlatBufferBuilder builder, Offset<GameProgress.Codegen.Enemies> crankedOffset) { builder.AddOffset(5, crankedOffset.Value, 0); }
  public static void AddEndless(FlatBufferBuilder builder, Offset<GameProgress.Codegen.Enemies> endlessOffset) { builder.AddOffset(6, endlessOffset.Value, 0); }
  public static void AddNone(FlatBufferBuilder builder, Offset<GameProgress.Codegen.Enemies> noneOffset) { builder.AddOffset(7, noneOffset.Value, 0); }
  public static void AddRacing(FlatBufferBuilder builder, Offset<GameProgress.Codegen.Enemies> racingOffset) { builder.AddOffset(8, racingOffset.Value, 0); }
  public static void AddSurvive(FlatBufferBuilder builder, Offset<GameProgress.Codegen.Enemies> surviveOffset) { builder.AddOffset(9, surviveOffset.Value, 0); }
  public static void AddThunderspearPvp(FlatBufferBuilder builder, Offset<GameProgress.Codegen.Enemies> thunderspearPvpOffset) { builder.AddOffset(10, thunderspearPvpOffset.Value, 0); }
  public static void AddTitanExplode(FlatBufferBuilder builder, Offset<GameProgress.Codegen.Enemies> titanExplodeOffset) { builder.AddOffset(11, titanExplodeOffset.Value, 0); }
  public static void AddWaves(FlatBufferBuilder builder, Offset<GameProgress.Codegen.Enemies> wavesOffset) { builder.AddOffset(12, wavesOffset.Value, 0); }
  public static void AddOther(FlatBufferBuilder builder, VectorOffset otherOffset) { builder.AddOffset(13, otherOffset.Value, 0); }
  public static VectorOffset CreateOtherVector(FlatBufferBuilder builder, Offset<GameProgress.Codegen.NamedMode>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateOtherVectorBlock(FlatBufferBuilder builder, Offset<GameProgress.Codegen.NamedMode>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOtherVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<GameProgress.Codegen.NamedMode>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOtherVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<GameProgress.Codegen.NamedMode>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartOtherVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameProgress.Codegen.Modes> EndModes(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameProgress.Codegen.Modes>(o);
  }
  public ModesT UnPack() {
    var _o = new ModesT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ModesT _o) {
    _o.AhssPvp = this.AhssPvp.HasValue ? this.AhssPvp.Value.UnPack() : null;
    _o.ApgPvp = this.ApgPvp.HasValue ? this.ApgPvp.Value.UnPack() : null;
    _o.Base = this.Base.HasValue ? this.Base.Value.UnPack() : null;
    _o.BladePvp = this.BladePvp.HasValue ? this.BladePvp.Value.UnPack() : null;
    _o.CageFight = this.CageFight.HasValue ? this.CageFight.Value.UnPack() : null;
    _o.Cranked = this.Cranked.HasValue ? this.Cranked.Value.UnPack() : null;
    _o.Endless = this.Endless.HasValue ? this.Endless.Value.UnPack() : null;
    _o.None = this.None.HasValue ? this.None.Value.UnPack() : null;
    _o.Racing = this.Racing.HasValue ? this.Racing.Value.UnPack() : null;
    _o.Survive = this.Survive.HasValue ? this.Survive.Value.UnPack() : null;
    _o.ThunderspearPvp = this.ThunderspearPvp.HasValue ? this.ThunderspearPvp.Value.UnPack() : null;
    _o.TitanExplode = this.TitanExplode.HasValue ? this.TitanExplode.Value.UnPack() : null;
    _o.Waves = this.Waves.HasValue ? this.Waves.Value.UnPack() : null;
    _o.Other = new List<GameProgress.Codegen.NamedModeT>();
    for (var _j = 0; _j < this.OtherLength; ++_j) {_o.Other.Add(this.Other(_j).HasValue ? this.Other(_j).Value.UnPack() : null);}
  }
  public static Offset<GameProgress.Codegen.Modes> Pack(FlatBufferBuilder builder, ModesT _o) {
    if (_o == null) return default(Offset<GameProgress.Codegen.Modes>);
    var _ahss_pvp = _o.AhssPvp == null ? default(Offset<GameProgress.Codegen.Enemies>) : GameProgress.Codegen.Enemies.Pack(builder, _o.AhssPvp);
    var _apg_pvp = _o.ApgPvp == null ? default(Offset<GameProgress.Codegen.Enemies>) : GameProgress.Codegen.Enemies.Pack(builder, _o.ApgPvp);
    var _base = _o.Base == null ? default(Offset<GameProgress.Codegen.Enemies>) : GameProgress.Codegen.Enemies.Pack(builder, _o.Base);
    var _blade_pvp = _o.BladePvp == null ? default(Offset<GameProgress.Codegen.Enemies>) : GameProgress.Codegen.Enemies.Pack(builder, _o.BladePvp);
    var _cage_fight = _o.CageFight == null ? default(Offset<GameProgress.Codegen.Enemies>) : GameProgress.Codegen.Enemies.Pack(builder, _o.CageFight);
    var _cranked = _o.Cranked == null ? default(Offset<GameProgress.Codegen.Enemies>) : GameProgress.Codegen.Enemies.Pack(builder, _o.Cranked);
    var _endless = _o.Endless == null ? default(Offset<GameProgress.Codegen.Enemies>) : GameProgress.Codegen.Enemies.Pack(builder, _o.Endless);
    var _none = _o.None == null ? default(Offset<GameProgress.Codegen.Enemies>) : GameProgress.Codegen.Enemies.Pack(builder, _o.None);
    var _racing = _o.Racing == null ? default(Offset<GameProgress.Codegen.Enemies>) : GameProgress.Codegen.Enemies.Pack(builder, _o.Racing);
    var _survive = _o.Survive == null ? default(Offset<GameProgress.Codegen.Enemies>) : GameProgress.Codegen.Enemies.Pack(builder, _o.Survive);
    var _thunderspear_pvp = _o.ThunderspearPvp == null ? default(Offset<GameProgress.Codegen.Enemies>) : GameProgress.Codegen.Enemies.Pack(builder, _o.ThunderspearPvp);
    var _titan_explode = _o.TitanExplode == null ? default(Offset<GameProgress.Codegen.Enemies>) : GameProgress.Codegen.Enemies.Pack(builder, _o.TitanExplode);
    var _waves = _o.Waves == null ? default(Offset<GameProgress.Codegen.Enemies>) : GameProgress.Codegen.Enemies.Pack(builder, _o.Waves);
    var _other = default(VectorOffset);
    if (_o.Other != null) {
      var __other = new Offset<GameProgress.Codegen.NamedMode>[_o.Other.Count];
      for (var _j = 0; _j < __other.Length; ++_j) { __other[_j] = GameProgress.Codegen.NamedMode.Pack(builder, _o.Other[_j]); }
      _other = CreateOtherVector(builder, __other);
    }
    return CreateModes(
      builder,
      _ahss_pvp,
      _apg_pvp,
      _base,
      _blade_pvp,
      _cage_fight,
      _cranked,
      _endless,
      _none,
      _racing,
      _survive,
      _thunderspear_pvp,
      _titan_explode,
      _waves,
      _other);
  }
}

public class ModesT
{
  public GameProgress.Codegen.EnemiesT AhssPvp { get; set; }
  public GameProgress.Codegen.EnemiesT ApgPvp { get; set; }
  public GameProgress.Codegen.EnemiesT Base { get; set; }
  public GameProgress.Codegen.EnemiesT BladePvp { get; set; }
  public GameProgress.Codegen.EnemiesT CageFight { get; set; }
  public GameProgress.Codegen.EnemiesT Cranked { get; set; }
  public GameProgress.Codegen.EnemiesT Endless { get; set; }
  public GameProgress.Codegen.EnemiesT None { get; set; }
  public GameProgress.Codegen.EnemiesT Racing { get; set; }
  public GameProgress.Codegen.EnemiesT Survive { get; set; }
  public GameProgress.Codegen.EnemiesT ThunderspearPvp { get; set; }
  public GameProgress.Codegen.EnemiesT TitanExplode { get; set; }
  public GameProgress.Codegen.EnemiesT Waves { get; set; }
  public List<GameProgress.Codegen.NamedModeT> Other { get; set; }

  public ModesT() {
    this.AhssPvp = null;
    this.ApgPvp = null;
    this.Base = null;
    this.BladePvp = null;
    this.CageFight = null;
    this.Cranked = null;
    this.Endless = null;
    this.None = null;
    this.Racing = null;
    this.Survive = null;
    this.ThunderspearPvp = null;
    this.TitanExplode = null;
    this.Waves = null;
    this.Other = null;
  }
}


static public class ModesVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyTable(tablePos, 4 /*AhssPvp*/, GameProgress.Codegen.EnemiesVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 6 /*ApgPvp*/, GameProgress.Codegen.EnemiesVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 8 /*Base*/, GameProgress.Codegen.EnemiesVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 10 /*BladePvp*/, GameProgress.Codegen.EnemiesVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 12 /*CageFight*/, GameProgress.Codegen.EnemiesVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 14 /*Cranked*/, GameProgress.Codegen.EnemiesVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 16 /*Endless*/, GameProgress.Codegen.EnemiesVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 18 /*None*/, GameProgress.Codegen.EnemiesVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 20 /*Racing*/, GameProgress.Codegen.EnemiesVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 22 /*Survive*/, GameProgress.Codegen.EnemiesVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 24 /*ThunderspearPvp*/, GameProgress.Codegen.EnemiesVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 26 /*TitanExplode*/, GameProgress.Codegen.EnemiesVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 28 /*Waves*/, GameProgress.Codegen.EnemiesVerify.Verify, false)
      && verifier.VerifyVectorOfTables(tablePos, 30 /*Other*/, GameProgress.Codegen.NamedModeVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
